<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="         
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd         
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd         
          http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd         
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd         
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd"
	default-autowire="byName">

	<bean id="baseDS" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close" abstract="true">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />
	</bean>
	<bean id="readDS" class="com.alibaba.druid.pool.DruidDataSource"
		parent="baseDS">
		<property name="url" value="${jdbc.url_read}" />
		<property name="username" value="${jdbc.username_read}" />
		<property name="password" value="${jdbc.pwd_read}" />
	</bean>
	<bean id="writeDS" class="com.alibaba.druid.pool.DruidDataSource"
		parent="baseDS">
		<property name="url" value="${jdbc.url_write}" />
		<property name="username" value="${jdbc.username_write}" />
		<property name="password" value="${jdbc.pwd_write}" />
	</bean>
	<bean id="productDataSource" class="com.jee4a.common.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String"><!-- write -->
				<entry key="write" value-ref="writeDS" /><!-- read -->
				<entry key="read" value-ref="readDS" />
			</map>
		</property><!-- 根据业务场景，选择默认为读还是写 ，一般应用可默认为写 -->
		<property name="defaultTargetDataSource" ref="writeDS" />
	</bean>
	<bean id="productSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="productDataSource" />
		<property name="mapperLocations" value="classpath*:sqlmap/product/*.xml" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="productSqlSessionFactory" />
		<property name="basePackage" value="com.jee4a.common.mapper.product" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="productDataSource" />
	</bean>
	
	
	<bean id="dataSourceAspect" class="com.jee4a.common.datasource.DataSourceAspect" />
	<aop:config proxy-target-class="true">
		<aop:aspect id="dataSourceAspect" ref="dataSourceAspect" order="1">
			<aop:pointcut id="tx" expression="execution(* com.jee4a.mysql.manager.proudct.*.*(..)) " />
			<aop:before pointcut-ref="tx" method="before" />
		</aop:aspect>
	</aop:config>
	
	
	<bean id="orderDS" class="com.alibaba.druid.pool.DruidDataSource"
 		parent="baseDS">
 		<property name="url" value="${jdbc.url_order}" />
 		<property name="username" value="${jdbc.username_order}" />
 		<property name="password" value="${jdbc.pwd_order}" />
 	</bean>
 	<bean id="orderSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
 		<property name="dataSource" ref="orderDS" />
 		<property name="mapperLocations" value="classpath*:sqlmap/order/*.xml" />
 	</bean>
 	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
 		<property name="sqlSessionFactoryBeanName" value="orderSessionFactory" />
 		<property name="basePackage" value="com.jee4a.common.mapper.order" />
 	</bean>
 	
 	<tx:annotation-driven transaction-manager="orderTransactionManager" />
 	<!-- 事务管理器 -->
 	<bean id="orderTransactionManager"
 		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
 		<property name="dataSource" ref="orderDS" />
 	</bean>
</beans>
